---
type Props = {
  index: number;
  title: string;
  description: string;
};

const { index, title, description } = Astro.props;
---

<div
  id="accordion__item"
  class="accordion__item group h-[160px] bg-[#F3F3F3] overflow-hidden w-full transition-all duration-500 mb-[30px] rounded-[45px] border border-dark shadow-[0px_5px_0px_#191a23]"
>
  <button
    class="accordion__toggle w-full h-[160px] flex items-center justify-between p-[60px] cursor-pointer"
    id={`${title} accordion__item menu button`}
    aria-expanded="false"
    aria-controls={`${title} accordion__item menu content`}
  >
    <div class="flex items-center gap-[25px]">
      <span class="hidden sm:block sm:text-6xl">0{index}</span>
      {title}
    </div>
    <div
      class="bg-white w-[58px] h-[58px] flex justify-center items-center rounded-full border border-dark"
    >
      <div
        class="accordion__icon h-10 w-10 transition-transform duration-300 flex justify-center items-center relative"
        aria-hidden="true"
      >
      </div>
    </div>
  </button>
  <div
    id={`${title} accordion__item menu content`}
    aria-labelledby={`${title} accordion__item menu button `}
    class="accordion__content px-[60px]"
  >
    <div class="w-full h-[2px] bg-black"></div>
    <p class="prose mb-4 mt-1 max-w-full pt-5 pb-[60px] transition-[height]">
      {description}
    </p>
  </div>
</div>
<style>
  .accordion__icon::before,
  .accordion__icon::after {
    content: "";
    position: absolute;
    background-color: black;
    transition: opacity 0.3s ease;
  }

  .accordion__icon::before {
    width: 100%;
    height: 6px; /* Increased from 2px to 6px */
    left: 0;
    top: calc(50% - 3px); /* Adjusted to center the thicker line */
  }

  .accordion__icon::after {
    width: 6px; /* Increased from 2px to 6px */
    height: 100%;
    left: calc(50% - 3px); /* Adjusted to center the thicker line */
    top: 0;
  }

  .accordion__icon.collapsed::after {
    opacity: 0;
  }
</style>
<script>
  function accordionSetup() {
    const accordionItems = document.querySelectorAll(
      ".accordion__item"
    ) as NodeListOf<HTMLElement>;

    accordionItems.forEach((accordionItem) => {
      const accordionToggle = accordionItem.querySelector(".accordion__toggle");
      const accordionIcon = accordionItem.querySelector(".accordion__icon");

      if (accordionToggle && accordionIcon) {
        accordionToggle.addEventListener("click", (e) => {
          e.stopPropagation(); // prevent the event from bubbling up to the document

          // Close other accordion items
          accordionItems.forEach((otherAccordionItem) => {
            if (
              otherAccordionItem !== accordionItem &&
              otherAccordionItem.classList.contains("active")
            ) {
              const otherAccordionToggle =
                otherAccordionItem.querySelector(".accordion__toggle");
              const otherAccordionIcon =
                otherAccordionItem.querySelector(".accordion__icon");

              if (otherAccordionToggle && otherAccordionIcon) {
                otherAccordionItem.classList.remove("active");
                otherAccordionItem.classList.remove("bg-green");
                otherAccordionToggle.setAttribute("aria-expanded", "false");
                otherAccordionItem.style.height = "160px";
                otherAccordionIcon.classList.remove("rotate-180");
                otherAccordionIcon.classList.remove("collapsed");
              }
            }
          });

          // Close itself if it's open, otherwise open it
          if (!accordionItem.classList.contains("active")) {
            accordionItem.classList.add("active");
            accordionToggle.setAttribute("aria-expanded", "true");

            // Set height according to content
            accordionItem.style.height = accordionItem.scrollHeight + "px";
            accordionItem.classList.add("bg-green");
            accordionIcon.classList.add("rotate-180");
            accordionIcon.classList.add("collapsed");
          } else {
            accordionItem.classList.remove("active");
            accordionToggle.setAttribute("aria-expanded", "false");

            // Reset height. Accordion Items have Overflow hidden so when it's
            // height is 60, because the toggle's height is 60, the content is hidden
            accordionItem.style.height = "160px";
            accordionIcon.classList.remove("rotate-180");
            accordionItem.classList.remove("bg-green");
            accordionIcon.classList.remove("collapsed");
          }

          e.preventDefault();
          return false;
        });
      }
    });

    // Close the accordion when clicking outside of it
    document.addEventListener("click", (event) => {
      accordionItems.forEach((accordionItem) => {
        const accordionToggle =
          accordionItem.querySelector(".accordion__toggle");
        const accordionIcon = accordionItem.querySelector(".accordion__icon");

        if (
          accordionToggle &&
          accordionIcon &&
          !accordionItem.contains(event.target as Node)
        ) {
          accordionItem.classList.remove("active");
          accordionItem.classList.remove("bg-green");
          accordionToggle.setAttribute("aria-expanded", "false");

          // Reset height. Overflow gets hidden
          accordionItem.style.height = "160px";
          accordionIcon.classList.remove("rotate-180");
          accordionIcon.classList.remove("collapsed");
        }
      });
    });
  }

  // Run on page swap
  accordionSetup();
  document.addEventListener("astro:after-swap", accordionSetup);
</script>
